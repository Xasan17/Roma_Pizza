import requests
import urllib3
import pandas as pd
import pyodbc
from datetime import datetime

# üîá –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()

# üîê –¢–æ–∫–µ–Ω
def load_balance_stores(token,conn):
    timestamp = datetime.now().isoformat(timespec='seconds')
    today_date = datetime.now().date()

    # üì¶ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    url = "https://roma-pizza-co.iiko.it/resto/api/v2/reports/balance/stores"
    params = {
        "key": token,
        "timestamp": timestamp
    }

    # üì• –ó–∞–ø—Ä–æ—Å
    response = requests.get(url, params=params, verify=False)

    if response.ok:
        try:
            # üìä –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ DataFrame
            data = response.json()
            df = pd.json_normalize(data, sep='_')

            # üßº –î–æ–±–∞–≤–∏–º –¥–∞—Ç—É –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É
            df['timestamp'] = today_date

            # üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server
            cursor = conn.cursor()

            # üìê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                IF OBJECT_ID('dbo.stagging_table_iiko_balance_stores', 'U') IS NULL
                BEGIN
                    CREATE TABLE dbo.stagging_table_iiko_balance_stores (
                        productId UNIQUEIDENTIFIER,
                        storeId UNIQUEIDENTIFIER,
                        amount FLOAT,
                        sum FLOAT,
                        timestamp DATE
                    )
                END
            """)
            conn.commit()

            # üßπ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute("""
                DELETE FROM dbo.stagging_table_iiko_balance_stores
                WHERE timestamp = ?
            """, today_date)
            conn.commit()

            # üíæ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for _, row in df.iterrows():
                cursor.execute("""
                    INSERT INTO dbo.stagging_table_iiko_balance_stores (
                        productId, storeId, amount, sum, timestamp
                    ) VALUES (?, ?, ?, ?, ?)
                """,
                    row.get("product"),
                    row.get("store"),
                    row.get("amount"),
                    row.get("sum"),
                    row.get("timestamp")
                )

            conn.commit()
            cursor.close()

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {today_date}")

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", e)

    else:
        print(f"[!] –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
