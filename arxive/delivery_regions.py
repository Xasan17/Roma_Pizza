import requests
import xml.etree.ElementTree as ET
import pandas as pd
import pyodbc
import urllib3
from datetime import datetime
# üîï –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()

# üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
base_url = "https://roma-pizza-co.iiko.it/resto"
token = "b30ed56c-316c-e69e-5e0b-d733535570ec"
date_from = "01.01.2022"
date_to = datetime.now().strftime("%d.%m.%Y")

# ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç: YYYY-MM-DD
params = {
    "dateFrom": date_from,
    "dateTo": date_to,
    "key": token
}
url = f"{base_url}/api/reports/delivery/regions"

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
response = requests.get(url, params=params, verify=False)

if response.ok:
    root = ET.fromstring(response.content)

    rows = root.findall(".//row")
    if not rows:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.")
    else:
        region_data = []
        for row in rows:
            region_data.append({
                "averageDeliveryTime": float(row.findtext("averageDeliveryTime") or 0),
                "deliveredOrdersPercent": float(row.findtext("deliveredOrdersPercent") or 0),
                "maxOrderCountDay": float(row.findtext("maxOrderCountDay") or 0),
                "orderCount": float(row.findtext("orderCount") or 0),
                "region": row.findtext("region") or ""
            })

        df = pd.DataFrame(region_data)

        # üõ† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server
        conn = pyodbc.connect(
            'DRIVER={ODBC Driver 17 for SQL Server};'
            'SERVER=TA_GEO_07\\SQLEXPRESS;'
            'DATABASE=Roma_pizza;'
            'Trusted_Connection=yes;'
        )
        cursor = conn.cursor()

        # ‚ùó –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
        IF OBJECT_ID('dbo.stagging_table_iiko_delivery_regions', 'U') IS NULL
        CREATE TABLE stagging_table_iiko_delivery_regions (
            id INT IDENTITY(1,1) PRIMARY KEY,
            averageDeliveryTime FLOAT,
            deliveredOrdersPercent FLOAT,
            maxOrderCountDay FLOAT,
            orderCount FLOAT,
            region NVARCHAR(100)
        )
        """)
        conn.commit()

        # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        cursor.execute("DELETE FROM stagging_table_iiko_delivery_regions")
        conn.commit()

        # üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for _, row in df.iterrows():
            cursor.execute("""
                INSERT INTO stagging_table_iiko_delivery_regions (
                    averageDeliveryTime, deliveredOrdersPercent,
                    maxOrderCountDay, orderCount, region
                ) VALUES (?, ?, ?, ?, ?)
            """,
            row["averageDeliveryTime"], row["deliveredOrdersPercent"],
            row["maxOrderCountDay"], row["orderCount"], row["region"])

        conn.commit()
        cursor.close()
        conn.close()

        print("‚úÖ –û—Ç—á–µ—Ç –ø–æ delivery regions —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ SQL Server")

else:
    print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", response.status_code, response.text)
