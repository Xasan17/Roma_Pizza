import requests
import pandas as pd
from datetime import datetime
import urllib3
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from iiko_auth import get_iiko_token
# üîá –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ HTTPS
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
def load_cash_shifts_all(conn):
    token = get_iiko_token()
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API
    base_url = "https://roma-pizza-co.iiko.it"
    url = f"{base_url}/resto/api/v2/cashshifts/list"

    params = {
        "key": token,
        "openDateFrom": "2022-01-01",
        "openDateTo":datetime.today().strftime("%Y-%m-%d"),
        "status": "ANY"
    }

    # üì• –ó–∞–ø—Ä–æ—Å –∫ API
    response = requests.get(url, params=params, verify=False)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
        exit()

    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        exit()

    # üßæ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ DataFrame
    df = pd.DataFrame(data)

    # üßæ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    expected_columns = [
        "id", "sessionNumber", "fiscalNumber", "cashRegNumber", "cashRegSerial",
        "openDate", "closeDate", "acceptDate", "managerId", "responsibleUserId",
        "sessionStartCash", "payOrders", "sumWriteoffOrders",
        "salesCash", "salesCredit", "salesCard",
        "payIn", "payOut", "payIncome", "cashRemain", "cashDiff",
        "sessionStatus", "conceptionId", "pointOfSaleId"
    ]

    # üßπ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    for col in expected_columns:
        if col not in df.columns:
            df[col] = None

    # üßÆ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    float_cols = [
        "sessionStartCash", "payOrders", "sumWriteoffOrders", "salesCash",
        "salesCredit", "salesCard", "payIn", "payOut", "payIncome",
        "cashRemain", "cashDiff"
    ]
    datetime_cols = ["openDate", "closeDate", "acceptDate"]

    # üí° –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    for col in float_cols:
        df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0.0)

    # üí° –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    def clean_datetime(value):
        try:
            if pd.isnull(value) or value in ["", "0001-01-01T00:00:00", "0001-01-01T00:00:00Z"]:
                return None
            dt = pd.to_datetime(value, errors='coerce')
            if pd.isnull(dt) or dt.year < 1753 or dt.year > 9999:
                return None
            return dt.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ SQL-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        except:
            return None

    for col in datetime_cols:
        df[col] = df[col].apply(clean_datetime)

    # üõ† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server

    try:
        cursor = conn.cursor()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server:", e)
        exit()

    # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    cursor.execute("""
    IF OBJECT_ID('dbo.iiko_cash_shifts_fact', 'U') IS NULL
    BEGIN
        CREATE TABLE dbo.iiko_cash_shifts_fact (
            id NVARCHAR(50) PRIMARY KEY,
            sessionNumber INT,
            fiscalNumber INT,
            cashRegNumber INT,
            cashRegSerial NVARCHAR(50),
            openDate DATETIME,
            closeDate DATETIME,
            acceptDate DATETIME,
            managerId NVARCHAR(50),
            responsibleUserId NVARCHAR(50),
            sessionStartCash FLOAT,
            payOrders FLOAT,
            sumWriteoffOrders FLOAT,
            salesCash FLOAT,
            salesCredit FLOAT,
            salesCard FLOAT,
            payIn FLOAT,
            payOut FLOAT,
            payIncome FLOAT,
            cashRemain FLOAT,
            cashDiff FLOAT,
            sessionStatus NVARCHAR(50),
            conceptionId NVARCHAR(50),
            pointOfSaleId NVARCHAR(50)
        )
    END
    """)
    conn.commit()

    # ‚úÖ SQL-–∑–∞–ø—Ä–æ—Å –≤—Å—Ç–∞–≤–∫–∏
    insert_sql = """
    INSERT INTO iiko_cash_shifts_fact (
        id, sessionNumber, fiscalNumber, cashRegNumber, cashRegSerial,
        openDate, closeDate, acceptDate, managerId, responsibleUserId,
        sessionStartCash, payOrders, sumWriteoffOrders,
        salesCash, salesCredit, salesCard,
        payIn, payOut, payIncome, cashRemain, cashDiff,
        sessionStatus, conceptionId, pointOfSaleId
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """

    # üß™ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    errors = 0
    inserted = 0

    for index, row in df.iterrows():
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º id
            cursor.execute("SELECT COUNT(*) FROM iiko_cash_shifts_fact WHERE id = ?", row['id'])
            if cursor.fetchone()[0] > 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            cursor.execute(insert_sql, (
                row['id'],
                int(row['sessionNumber']) if pd.notnull(row['sessionNumber']) else None,
                int(row['fiscalNumber']) if pd.notnull(row['fiscalNumber']) else None,
                int(row['cashRegNumber']) if pd.notnull(row['cashRegNumber']) else None,
                row['cashRegSerial'],
                row['openDate'], row['closeDate'], row['acceptDate'],
                row['managerId'], row['responsibleUserId'],
                row['sessionStartCash'], row['payOrders'], row['sumWriteoffOrders'],
                row['salesCash'], row['salesCredit'], row['salesCard'],
                row['payIn'], row['payOut'], row['payIncome'],
                row['cashRemain'], row['cashDiff'],
                row['sessionStatus'], row['conceptionId'], row['pointOfSaleId']
            ))
            inserted += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
            errors += 1
            continue

    conn.commit()
    cursor.close()

    print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {inserted}, –æ—à–∏–±–æ–∫ –≤—Å—Ç–∞–≤–∫–∏: {errors}")
