import requests
import xml.etree.ElementTree as ET
import pandas as pd
import pyodbc
import urllib3
from datetime import datetime, timedelta

# üîï –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
urllib3.disable_warnings()
def load_employee_shifts(token,conn):
    date_from = "2022-01-01"
    date_to = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")

    # üåê URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    url = "https://roma-pizza-co.iiko.it/resto/api/employees/schedule/"
    params = {
        "key": token,
        "from": date_from,
        "to": date_to,
        "withPaymentDetails": "false",
        "revisionFrom": "-1"
    }

    # üì° –ó–∞–ø—Ä–æ—Å –∫ API
    response = requests.get(url, params=params, verify=False)

    if response.ok:
        try:
            root = ET.fromstring(response.text)
            shifts = []

            for s in root.findall('.//schedule'):
                shifts.append({
                    "id": s.findtext("id"),
                    "employeeId": s.findtext("employeeId"),
                    "roleId": s.findtext("roleId"),
                    "dateFrom": s.findtext("dateFrom"),
                    "dateTo": s.findtext("dateTo"),
                    "scheduleTypeCode": s.findtext("scheduleTypeCode"),
                    "scheduleTypeId": s.findtext("scheduleTypeId"),  # üëà –¥–æ–±–∞–≤–∏–ª–∏
                    "nonPaidMinutes": int(s.findtext("nonPaidMinutes") or 0),
                    "departmentId": s.findtext("departmentId"),
                    "departmentName": s.findtext("departmentName")
                })

            df = pd.DataFrame(shifts)

            # üß± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server
            cursor = conn.cursor()

            # ‚ùó –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            cursor.execute("""
            IF OBJECT_ID('dbo.stagging_table_iiko_employee_shifts', 'U') IS NULL
            CREATE TABLE dbo.stagging_table_iiko_employee_shifts (
                id UNIQUEIDENTIFIER PRIMARY KEY,
                employeeId UNIQUEIDENTIFIER,
                roleId UNIQUEIDENTIFIER,
                dateFrom DATETIME2,
                dateTo DATETIME2,
                scheduleTypeCode NVARCHAR(50),
                scheduleTypeId NVARCHAR(50), 
                nonPaidMinutes INT,
                departmentId UNIQUEIDENTIFIER,
                departmentName NVARCHAR(255)
            )
            """)
            conn.commit()

            # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM dbo.stagging_table_iiko_employee_shifts")
            conn.commit()

            # üì§ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            for _, row in df.iterrows():
                if not row.get("id"):
                    continue

                cursor.execute("""
                    INSERT INTO dbo.stagging_table_iiko_employee_shifts (
                        id, employeeId, roleId, dateFrom, dateTo,
                        scheduleTypeCode, scheduleTypeId, nonPaidMinutes,
                        departmentId, departmentName
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                row.get("id"),
                row.get("employeeId"),
                row.get("roleId"),
                row.get("dateFrom"),
                row.get("dateTo"),
                row.get("scheduleTypeCode"),
                row.get("scheduleTypeId"),
                row.get("nonPaidMinutes"),
                row.get("departmentId"),
                row.get("departmentName"))

            conn.commit()
            cursor.close()

            print("‚úÖ –°–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ SQL Server")

        except ET.ParseError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML:", e)
    else:
        print(f"[!] –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
