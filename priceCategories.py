import requests
import pandas as pd
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()
def load_price_categories(token,conn):
    # üì¶ URL –∑–∞–ø—Ä–æ—Å–∞
    url = "https://roma-pizza-co.iiko.it/resto/api/v2/entities/priceCategories"

    # üì• –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params={"key": token}, verify=False)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.ok:
        try:
            json_data = response.json()
            categories = json_data.get("response", [])

            # üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
            df = pd.json_normalize(categories, sep='_')

            # üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server
            cursor = conn.cursor()

            # üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                IF OBJECT_ID('dbo.stagging_table_iiko_price_categories', 'U') IS NOT NULL
                    DROP TABLE dbo.stagging_table_iiko_price_categories;
            """)
            conn.commit()

            # üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                CREATE TABLE dbo.stagging_table_iiko_price_categories (
                    id UNIQUEIDENTIFIER PRIMARY KEY,
                    name NVARCHAR(255),
                    code NVARCHAR(50),
                    deleted BIT,
                    assignableManually BIT,
                    strategyType NVARCHAR(50),
                    strategyValue DECIMAL(10, 2)
                )
            """)
            conn.commit()

            # üíæ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            for _, row in df.iterrows():
                cursor.execute("""
                    INSERT INTO dbo.stagging_table_iiko_price_categories (
                        id, name, code, deleted, assignableManually, strategyType, strategyValue
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                """,
                row.get("id"),
                row.get("name"),
                row.get("code"),
                row.get("deleted"),
                row.get("assignableManually"),
                row.get("pricingStrategy_type"),
                row.get("pricingStrategy_percent", row.get("pricingStrategy_delta", 0))
            )

            conn.commit()
            cursor.close()
            print("‚úÖ –¶–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ SQL Server.")

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", e)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
